name: Deploy Node App on Azure VM (Client Secret + Account Key + PM2)

on:
  workflow_dispatch:

# Required repo secrets:
# AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID, AZURE_CLIENT_SECRET
# AZURE_RESOURCE_GROUP, AZURE_VM_NAME
# AZ_STORAGE_ACCOUNT, AZ_STORAGE_CONTAINER, AZ_STORAGE_KEY
# (Optional) SONAR_HOST_URL, SONAR_TOKEN

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write   # harmless here; OIDC not used

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build the application (optional)
        run: |
          npm run build 2>/dev/null || echo "No build script found, skipping build step"

      - name: Run unit tests with coverage and JUnit reports
        env:
          JEST_JUNIT_OUTPUT: coverage/junit.xml
        run: npm run test:ci

      - name: Publish test results to Checks
        uses: dorny/test-reporter@v2.1.1
        if: always()
        with:
          name: Jest Test Results
          path: coverage/junit.xml
          reporter: jest-junit
          fail-on-error: true

      - name: Upload test results to GitHub
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: test-results-node
          path: coverage/
          retention-days: 30

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=sample-node-app-saurabh
            -Dsonar.organization=sda
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.sources=.
            -Dsonar.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js
            -Dsonar.tests=tests/
            -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js
            -Dsonar.coverage.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js

      - name: Create deployment package
        run: |
          set -euo pipefail
          STAGING="$GITHUB_WORKSPACE/deployment-package"
          rm -rf "$STAGING"
          mkdir -p "$STAGING"

          [ -d public ] && cp -r public "$STAGING/" || echo "No public/ directory found"
          [ -d node_modules ] && cp -r node_modules "$STAGING/" || echo "No node_modules/ directory found"
          [ -f server.js ] && cp server.js "$STAGING/" || echo "No server.js found"
          [ -f package.json ] && cp package.json "$STAGING/" || true
          [ -f package-lock.json ] && cp package-lock.json "$STAGING/" || true
          [ -f README.md ] && cp README.md "$STAGING/" || true
          [ -f Dockerfile ] && cp Dockerfile "$STAGING/" || echo "No Dockerfile found"

          (cd "$STAGING" && npm pkg delete devDependencies || true)

          TS="$(date +%Y%m%d-%H%M%S)"
          SHORT_SHA="${GITHUB_SHA::7}"
          ZIP_NAME="deployment-package-${SHORT_SHA}-${TS}.zip"
          (cd "$GITHUB_WORKSPACE" && zip -r "$ZIP_NAME" "deployment-package")
          echo "ZIP_NAME=$ZIP_NAME" >> "$GITHUB_ENV"

      - name: Azure login (client secret)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Upload deployment package artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: deployment-package-node-${{ github.run_number }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 90

      # -------- Upload ZIP to Blob using account key; emit 1h SAS URL --------
      - name: Upload package to Blob (key-based)
        if: ${{ success() }}
        uses: azure/cli@v2.1.0
        env:
          ZIP_NAME: ${{ env.ZIP_NAME }}
          AZ_STORAGE_ACCOUNT: ${{ secrets.AZ_STORAGE_ACCOUNT }}
          AZ_STORAGE_CONTAINER: ${{ secrets.AZ_STORAGE_CONTAINER }}
          AZ_STORAGE_KEY: ${{ secrets.AZ_STORAGE_KEY }}
        with:
          inlineScript: |
            set -euo pipefail
            : "${AZ_STORAGE_ACCOUNT:?AZ_STORAGE_ACCOUNT missing}"
            : "${AZ_STORAGE_CONTAINER:?AZ_STORAGE_CONTAINER missing}"
            : "${AZ_STORAGE_KEY:?AZ_STORAGE_KEY missing}"
            : "${ZIP_NAME:?ZIP_NAME missing}"

            AZ_STORAGE_KEY="$(printf %s "$AZ_STORAGE_KEY" | tr -d '\r\n')"
            export AZ_STORAGE_KEY

            az storage container create \
              --name "$AZ_STORAGE_CONTAINER" \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --only-show-errors 1>/dev/null

            az storage blob list \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --num-results 1 --only-show-errors 1>/dev/null

            echo "Uploading $ZIP_NAME ..."
            az storage blob upload \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --file "$ZIP_NAME" \
              --name "$ZIP_NAME" \
              --overwrite true \
              --only-show-errors

            SAS=$(az storage blob generate-sas \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --name "$ZIP_NAME" \
              --permissions r \
              --expiry "$(date -u -d '+1 hour' '+%Y-%m-%dT%H:%MZ')" \
              --https-only --full-uri -o tsv)
            echo "::add-mask::$SAS"
            echo "PACKAGE_SAS_URL=$SAS" >> "$GITHUB_ENV"

      # -------- VM: install Node 22 + PM2, download & run --------
      - name: Deploy on Azure VM (PM2 + Node 22)
        if: ${{ success() }}
        uses: azure/cli@v2.1.0
        env:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_VM_NAME: ${{ secrets.AZURE_VM_NAME }}
          PACKAGE_SAS_URL: ${{ env.PACKAGE_SAS_URL }}
          APP_USER: azureuser      # change if different
          APP_DIR: /opt/myapp
          APP_NAME: myapp
          APP_PORT: 3000           # change to your app port
        with:
          inlineScript: |
            set -euo pipefail
            : "${PACKAGE_SAS_URL:?PACKAGE_SAS_URL missing}"
            az vm run-command invoke \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_VM_NAME" \
              --command-id RunShellScript \
              --scripts "
                set -euo pipefail
                PACKAGE_SAS_URL='${PACKAGE_SAS_URL}'
                APP_USER='${APP_USER:-azureuser}'
                APP_DIR='${APP_DIR:-/opt/myapp}'
                APP_NAME='${APP_NAME:-myapp}'
                APP_PORT='${APP_PORT:-3000}'
                CURRENT_DIR=\"\$APP_DIR/current\"
                TMP=/tmp
                ZIP_FILE=\$TMP/\$(basename \"\$PACKAGE_SAS_URL\" | cut -d'?' -f1)

                sudo apt-get update -y
                sudo apt-get install -y curl unzip ca-certificates gnupg jq

                # Node 22.x
                if ! command -v node >/dev/null 2>&1 || [ \"\$(node -v | sed 's/v\\([0-9]*\\).*/\\1/')\" -lt 22 ]; then
                  curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
                  sudo apt-get install -y nodejs
                fi

                # PM2
                sudo npm i -g pm2@latest

                sudo mkdir -p \"\$CURRENT_DIR\"
                sudo chown -R \"\$APP_USER\":\"\$APP_USER\" \"\$APP_DIR\"

                echo 'Downloading artifact...'
                curl -fSL \"\$PACKAGE_SAS_URL\" -o \"\$ZIP_FILE\"

                echo 'Unzipping...'
                sudo unzip -o \"\$ZIP_FILE\" -d \"\$CURRENT_DIR\"
                if [ -d \"\$CURRENT_DIR/deployment-package\" ]; then
                  shopt -s dotglob
                  sudo mv \"\$CURRENT_DIR\"/deployment-package/* \"\$CURRENT_DIR\"/
                  sudo rm -rf \"\$CURRENT_DIR\"/deployment-package
                  shopt -u dotglob
                fi
                sudo chown -R \"\$APP_USER\":\"\$APP_USER\" \"\$CURRENT_DIR\"

                if [ -f \"\$CURRENT_DIR/package.json\" ]; then
                  sudo -u \"\$APP_USER\" bash -lc \"cd '\$CURRENT_DIR' && (npm ci --omit=dev || npm i --omit=dev)\"
                fi

                # Start with PM2: prefer npm start, else server.js
                STARTED=0
                if [ -f \"\$CURRENT_DIR/package.json\" ] && jq -e '.scripts.start' \"\$CURRENT_DIR/package.json\" >/dev/null 2>&1; then
                  sudo -u \"\$APP_USER\" pm2 delete \"\$APP_NAME\" >/dev/null 2>&1 || true
                  sudo -u \"\$APP_USER\" pm2 start npm --name \"\$APP_NAME\" -- start --prefix \"\$CURRENT_DIR\" && STARTED=1
                fi
                if [ \"\$STARTED\" -eq 0 ] && [ -f \"\$CURRENT_DIR/server.js\" ]; then
                  sudo -u \"\$APP_USER\" pm2 delete \"\$APP_NAME\" >/dev/null 2>&1 || true
                  sudo -u \"\$APP_USER\" pm2 start \"\$CURRENT_DIR/server.js\" --name \"\$APP_NAME\"
                  STARTED=1
                fi
                if [ \"\$STARTED\" -eq 0 ]; then
                  echo 'No start script or server.js found.' >&2
                  ls -la \"\$CURRENT_DIR\"
                  exit 1
                fi

                # PM2 autostart on boot
                sudo env PATH=\$PATH:/usr/bin pm2 startup systemd -u \"\$APP_USER\" --hp \"/home/\$APP_USER\" >/dev/null
                sudo -u \"\$APP_USER\" pm2 save

                # Optional: quick local health check
                if command -v curl >/dev/null 2>&1; then
                  set +e
                  curl -fsS \"http://127.0.0.1:\$APP_PORT\" | head -c 200 || true
                  echo
                  set -e
                fi

                echo 'Deployment finished.'
              "