name: Deploy Node App to Azure Container Apps

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/sample-node-app-ih
  CONTAINER_APP_NAME: sample-node-app-ih
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build the application (optional)
        run: |
          npm run build 2>/dev/null || echo "No build script found, skipping build step"

      - name: Run unit tests with coverage and JUnit reports
        env:
          JEST_JUNIT_OUTPUT: coverage/junit.xml
        run: npm run test:ci

      - name: Publish test results to Checks
        uses: dorny/test-reporter@v2.1.1
        if: always()
        with:
          name: Jest Test Results
          path: coverage/junit.xml
          reporter: jest-junit
          fail-on-error: true

      - name: Upload test results to GitHub
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: test-results-node
          path: coverage/
          retention-days: 30

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=sample-node-app-saurabh
            -Dsonar.organization=sda
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.sources=.
            -Dsonar.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js
            -Dsonar.tests=tests/
            -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js
            -Dsonar.coverage.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5.3.0
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.environment || 'dev' }}-{{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5.2.0
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image details
        run: |
          echo "Image tags: ${{ steps.meta.outputs.tags }}"
          echo "Image digest: ${{ steps.build.outputs.digest }}"

  deploy-to-azure-container-apps:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Azure login (client secret)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set environment variables
        run: |
          ENVIRONMENT_SUFFIX=${{ github.event.inputs.environment || 'dev' }}
          CONTAINER_APP_NAME="${CONTAINER_APP_NAME}-${ENVIRONMENT_SUFFIX}"
          CONTAINER_APP_ENVIRONMENT="${CONTAINER_APP_NAME}-env"
          echo "CONTAINER_APP_NAME=${CONTAINER_APP_NAME}" >> $GITHUB_ENV
          echo "CONTAINER_APP_ENVIRONMENT=${CONTAINER_APP_ENVIRONMENT}" >> $GITHUB_ENV
          echo "ENVIRONMENT_SUFFIX=${ENVIRONMENT_SUFFIX}" >> $GITHUB_ENV

      - name: Verify Container Apps Environment exists
        uses: azure/cli@v2.1.0
        with:
          inlineScript: |
            set -euo pipefail
            
            # Verify Container Apps Environment exists
            if az containerapp env show --name "$CONTAINER_APP_ENVIRONMENT" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
              echo "✅ Container Apps Environment '$CONTAINER_APP_ENVIRONMENT' found"
            else
              echo "❌ Container Apps Environment '$CONTAINER_APP_ENVIRONMENT' not found"
              echo "Please create the Container Apps Environment first"
              exit 1
            fi

      - name: Deploy to Azure Container Apps
        uses: azure/cli@v2.1.0
        with:
          inlineScript: |
            set -euo pipefail
            
            # Get the latest image tag
            IMAGE_TAG="${{ env.ENVIRONMENT_SUFFIX }}-$(date +%Y%m%d-%H%M%S)"
            FULL_IMAGE_NAME="${{ env.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}"
            
            echo "Deploying image: ${FULL_IMAGE_NAME}"
            
            # Verify Container App exists and update it
            if az containerapp show --name "$CONTAINER_APP_NAME" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
              echo "✅ Updating existing Container App '$CONTAINER_APP_NAME'..."
              az containerapp update \
                --name "$CONTAINER_APP_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --image "$FULL_IMAGE_NAME" \
                --set-env-vars \
                  NODE_ENV="${{ env.ENVIRONMENT_SUFFIX }}" \
                  PORT=3000 \
                  APP_VERSION="${{ github.sha }}" \
                  DEPLOYMENT_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            else
              echo "❌ Container App '$CONTAINER_APP_NAME' not found"
              echo "Please create the Container App first"
              exit 1
            fi

      - name: Get Container App URL
        uses: azure/cli@v2.1.0
        with:
          inlineScript: |
            set -euo pipefail
            
            # Get the Container App URL
            APP_URL=$(az containerapp show \
              --name "$CONTAINER_APP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "properties.configuration.ingress.fqdn" \
              --output tsv)
            
            echo "Container App URL: https://${APP_URL}"
            echo "APP_URL=https://${APP_URL}" >> $GITHUB_ENV

      - name: Health check
        run: |
          echo "Performing health check on ${{ env.APP_URL }}"
          sleep 30  # Wait for the app to start
          
          # Try to reach the application
          for i in {1..5}; do
            if curl -f -s "${{ env.APP_URL }}" > /dev/null; then
              echo "✅ Health check passed! Application is responding."
              exit 0
            else
              echo "⏳ Attempt $i/5: Application not ready yet, waiting..."
              sleep 10
            fi
          done
          
          echo "❌ Health check failed! Application is not responding."
          exit 1

      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ env.ENVIRONMENT_SUFFIX }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Container App** | ${{ env.CONTAINER_APP_NAME }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Resource Group** | ${{ env.RESOURCE_GROUP }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Docker Image** | ${{ env.DOCKER_IMAGE_NAME }}:${{ env.ENVIRONMENT_SUFFIX }}-$(date +%Y%m%d-%H%M%S) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Application URL** | [${{ env.APP_URL }}](${{ env.APP_URL }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit SHA** | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment Date** | $(date -u +%Y-%m-%dT%H:%M:%SZ) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎉 Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
